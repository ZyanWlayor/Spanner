/**
 * @description Handle file size readability
 * @param {Integer} value file size of byte unit
 * @returns {String} readable file size
 */
function readableSize(value){
    if(null==value||value==''){
        return "0 Bytes";
    }
    var unitArr = new Array("Bytes","KB","MB","GB","TB","PB","EB","ZB","YB");
    var index=0;
    var srcsize = parseFloat(value);
    index=Math.floor(Math.log(srcsize)/Math.log(1024));
    var size =srcsize/Math.pow(1024,index);
    size=size.toFixed(2);// decimal digit to keep
    return size+unitArr[index];
}

/**
 * @description random num between min and max (include min and max)
 * @param {Integer} rMi min
 * @param {Integer} rMa max
 * @returns {Integer}
 */
function random(rMi, rMa) { return ~~((Math.random() * (rMa - rMi + 1)) + rMi); }

/**
 * @description a guid generator
 * @returns {String} a guid eg. '9a9681bb-4dfa-6750-5ae4-9530209d8a9d'
 */
function newGuid() {
    var guid = "";
    for (var i = 1; i <= 32; i++) {
        var n = Math.floor(Math.random() * 16.0).toString(16);
        guid += n;
        if ((i == 8) || (i == 12) || (i == 16) || (i == 20))
            guid += "-";
    }
    return guid;
}

/**
 * @description datetime formatter
 * @param {Date} value a date object struct by `new Date(*)`
 * @param {String} fmt a fmt string like "MM-dd ..."
 * @returns {String}
 */
function dateTimeFormat(value, fmt) {
    var o = {
        "M+": value.getMonth() + 1, //月份
        "d+": value.getDate(), //日
        "h+": value.getHours(), //小时
        "m+": value.getMinutes(), //分
        "s+": value.getSeconds(), //秒
        "q+": Math.floor((value.getMonth() + 3) / 3), //季度
        "S": value.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (value.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
}

/**
 * @description TypedArray concat helper
 * @param {TypedArray} resultConstructor TypedArray Constructor eg.Uint8Array
 * @param  {...typedArray} arrays TypedArray instance array to concat
 * @returns 
 */
function concatenate(resultConstructor, ...arrays) {
    let totalLength = 0;
    for (let arr of arrays) {
        totalLength += arr.length;
    }
    let result = new resultConstructor(totalLength);
    let offset = 0;
    for (let arr of arrays) {
        result.set(arr, offset);
        offset += arr.length;
    }
    return result;
}

/**
 * @description retry helpers regenerator promise object every time
 * @param promiseFn Promise function to reExecute each retry time
 * @param times times
 * @returns Promise<T>
 */
function retryPromise(promiseFn, times = 5, retryInterval = 0) {
    return new Promise((resolve, reject) => {
        let runtimes = 0;
        function retryWrapperFn() {
            promiseFn().then((result) => {
                resolve(result);
            }).catch((err) => {
                // detect strike reject to whole, it ignore retry times option and reject directly
                if (err.mode === 'strike') {
                    reject(err);
                    return
                }
                if (!times) {
                    setTimeout(() => retryWrapperFn(), retryInterval);
                } else if (runtimes < times) {
                    setTimeout(() => retryWrapperFn(), retryInterval);
                } else {
                    const retryError = new Error(`retryPromise exceed ${times} times : ${err.toString()}`);
                    reject(retryError);
                }

            }).finally(() => {
                runtimes++;
            });
        }

        retryWrapperFn();

    })
}

export { concatenate, dateTimeFormat, newGuid as guid, random, readableSize, retryPromise };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
